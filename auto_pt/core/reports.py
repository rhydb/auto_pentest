# Author: Rhydian Brown
from datetime import datetime
from abc import ABC, abstractmethod
from tabulate import tabulate
from typing import Any, Self, Union

class Report(ABC):
    text = ""
    found_something = False

    @abstractmethod 
    def background(self, colour, text) -> str:
        return ""

    @abstractmethod 
    def colour(self, colour, text) -> str:
        return ""

    @abstractmethod
    def bold(self, text: str) -> str:
        return ""

    @abstractmethod
    def heading(self, heading: str) -> Self:
        return self

    @abstractmethod
    def table(self, headers: list[str], table: list[list[Any]]) -> Self:
        return self

    @abstractmethod
    def paragraph(self, text: str) -> Self:
        return self

    @abstractmethod
    def list(self, items: list[str]) -> Self:
        return self

    def finish(self) -> str:
        final = self.text
        self.text = ""
        return final


def ReportFactory(report_type: str) -> Report | None:
    if report_type == "latex":
        return LatexReport()
    if report_type == "html":
        return HTMLReport()
    return None


class LatexReport(Report):
    header = r'''
\documentclass{article}
\usepackage{xcolor}
\title{Automatic OT Pentest Report}
\author{Automatic OT Pentest tool}
\date{\today}

\begin{document}
\maketitle

\tableofcontents
    '''

    footer = "\\end{document}"

    def background(self, colour, text) -> str:
        return "\\colorbox[HTML]{%s}{%s}" % (colour.replace('#', ''), text)

    def colour(self, colour, text) -> str:
        return "\\textcolor[HTML]{%s}{%s}" % (colour.replace('#', ''), text)

    def bold(self, text: str) -> str:
        return "\\textbf{" + text + "}"

    def table(self, headers: list[str], table: list[list[Any]]) -> Self:
        self.text += str(tabulate(table, headers=headers, tablefmt="latex"))
        return self
    
    def heading(self, heading: str) -> Self:
        self.text += "\\section{%s}\n" % heading
        return self

    def paragraph(self, text: str) -> Self:
        self.text += "\\par " + text + r' \\' +'\n'
        return self

    def list(self, items: list[str]) -> Self:
        self.text += "\\begin{itemize}\n"
        self.text += ''.join('\\item ' + i + '\n' for i in items)
        self.text += '\n\\end{itemize}\n'
        return self

    def finish(self) -> str:
        self.text = self.header + self.text + self.footer
        return super().finish()


class HTMLReport(Report):
    html_head = '''
        <style>
body {
  max-width: 1000px;
  margin: auto;
  font-family: sans-serif;
}

table {
  border-collapse: collapse;
  border: 1px solid black;
  margin: auto;
}

td, th {
  padding: 4px 8px;
  border: 1px solid #ccc;
}

tr {
    background: #f9f9f9;
}

tr:nth-child(odd) {
  background-color: #fefefe;
}
        </style>

    '''

    html_foot = '''


    '''

    # for the table of contents
    def __init__(self) -> None:
        self.headers = []

    def make_id(self, heading):
        return heading.lower().replace(' ', '-')

    def heading(self, heading: str) -> Self:
        header_id = self.make_id(heading)
        self.headers.append((heading, header_id))
        self.text += f"<h2 id={header_id}>" + str(heading) + "</h2>\n"
        return self

    def background(self, colour, text) -> str:
        return "<span style='background: %s'>%s</span>" % (colour, text)

    def colour(self, colour, text) -> str:
        return "<span style='color: %s'>%s</span>" % (colour, text)

    def bold(self, text: str) -> str:
        return "<b>" + text + "</b>"

    def table(self, headers: list[str], table: list[list[Any]]) -> Self:
        out = "<table>\n"
        out += "<thead>\n<tr>\n"
        for th in headers:
            out += "<th>" + str(th) + "</th>\n"
        out += "</tr>\n</thead>\n"
        out += "<tbody>\n"
        for tr in table:
            out += "<tr>\n"
            for td in tr:
                out += "<td>" + str(td) + "</td>\n"
            out += "</tr>\n"
        out += "</tbody>\n</table>\n"
        self.text += out
        return self

    def paragraph(self, text: str) -> Self:
        self.text += "<p>" + text + "</p>\n"
        return self

    def list(self, items: list[str]) -> Self:
        self.text += "<ul>\n"
        self.text += ''.join("<li>" + i + "</li>\n" for i in items)
        self.text += "</ul>\n"
        return self

    def get_date(self) -> str:
        return datetime.now().strftime('%Y-%m-%d')

    def finish(self) -> str:
        report = self.text
        self.text = self.html_head

        print(self.headers)
        if self.headers:
            self.text += '<h1>Contents</h1>\n'
            self.text += '<ul>\n'
            for name, id in self.headers:
                self.text += '<li><a href=#' + id + '>' + name + '</a></li>\n'
            self.text += '</ul>\n'

        self.text += '<h1>Report for: ' + self.get_date() + '</h1>'
        self.text += report + self.html_foot
        self.headers = []
        return super().finish()
