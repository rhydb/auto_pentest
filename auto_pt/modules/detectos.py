# Author: Rhydian Brown
from queue import Queue
import threading
import nmap3
import tabulate

from auto_pt.core.modules import Exploit, Option, Likelihood, Impact, text_color
from auto_pt.core.reports import Report
from auto_pt.core.parsers import parse_ip

class Module(Exploit):
    def report_types(value: str):
        value = str(value) # enforce str or raise ValueError
        types = ["pie", "table"]
        if value.lower() in types:
            return True
        raise ValueError("Unsupported report type. Support types:", types)

    name = "OS Detection"
    desc = "Detects the operating systems of hosts"

    likelihood = Likelihood.UNLIKELY
    impact = Impact.MINOR

    def __init__(self):
        super().__init__()

        self.options = {
                "RHOSTS": Option(None, True, "Remote hosts", type=parse_ip),
                "THREADS": Option(1, False, "Number of threads to run", type=int),
                "REPORT": Option("pie", False, "Type of report to generate", type=self.report_types),
                }
        self.results = {}

    nmap = nmap3.Nmap()

    def write_report(self, report: Report):
        mitigation = [
                "Implement a firewall",
                "Use a VPN to encrypt communication across networks",
                "Isolate the Modbus network"
                ]
        (
            report
                .heading(self.name)
                .paragraph("Risk: " + report.background(self.severity_colour, report.colour(text_color(self.severity_colour), str(self.severity))))\
                .paragraph(self.desc)
        )

        if self.results:
            report = self.get_option("REPORT")
            if report == "pie":
                pass
            elif report == "table":
                table = [[name, count] for name, count in self.results.items()]
                return tabulate.tabulate(table, ["Name", "Frequency"])


    def worker(self, queue):
        while not queue.empty():
            rhost = queue.get()
            print(rhost)
            res = self.nmap.nmap_os_detection(rhost)
            if isinstance(res, list):
                if len(res) > 0:
                    res = res[0]
            elif isinstance(res, dict):
                res = res.get(rhost)
            if res:
                # just pick the first one and increment
                print(res)
                os = res["osclass"]["osfamily"]
                self.results[os] = self.results.get(os, 0) + 1
            queue.task_done()

    def exploit(self):
        self.results = {}

        rhosts = self.get_option("RHOSTS")

        thread_count = self.get_option("THREADS")

        queue = Queue()
        for ip in rhosts:
            queue.put(ip)

        threads = []
        for _ in range(thread_count):
            thread = threading.Thread(target=self.worker, args=(queue, ))
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()

        return self.results
